[gd_scene load_steps=28 format=3 uid="uid://cprotiix4mkpw"]

[ext_resource type="Script" uid="uid://bcq2343m3ftb3" path="res://Scripts/Multiplayer/Game_State_Manager.gd" id="1_4g7hg"]
[ext_resource type="Texture2D" uid="uid://dgwr1qvgkgqwt" path="res://Assets/Sprites/Runway.png" id="1_d4vwv"]
[ext_resource type="Script" uid="uid://d1yhqdj5h3gy5" path="res://Scenes/camera_rig.gd" id="2_nogt5"]
[ext_resource type="PackedScene" uid="uid://chyj64wwnwo67" path="res://Assets/CharacterController.tscn" id="3_4g7hg"]
[ext_resource type="Script" uid="uid://upooqkhm2kta" path="res://Scripts/Multiplayer/player1_controller.gd" id="4_s3dso"]
[ext_resource type="Script" uid="uid://04lcb5nwata0" path="res://Scripts/Multiplayer/player2_controller.gd" id="4_vxqhj"]
[ext_resource type="AudioStream" uid="uid://cjydp54g8armk" path="res://Assets/Music/Dress to Agress - Battle!.mp3" id="6_xylqa"]
[ext_resource type="Texture2D" uid="uid://chrsq4yc47n62" path="res://Assets/Sprites/panels.PNG" id="7_nt58u"]
[ext_resource type="Script" uid="uid://tpi0f3vw66es" path="res://Scenes/PanelStartFightScene.gd" id="8_o1kay"]
[ext_resource type="FontFile" uid="uid://bfwx5rcyywj57" path="res://Assets/Fonts/MintsodaLimeGreen13X16Regular-KVvzA.ttf" id="9_psxfv"]
[ext_resource type="Texture2D" uid="uid://bbjhablweb6g3" path="res://Assets/Sprites/key_w.tres" id="10_atul7"]
[ext_resource type="Texture2D" uid="uid://bauqefwylplf1" path="res://Assets/Sprites/key_a.tres" id="11_su618"]
[ext_resource type="Texture2D" uid="uid://crxqba6o8nakf" path="res://Assets/Sprites/key_d.tres" id="12_wlmax"]
[ext_resource type="Texture2D" uid="uid://505ins2eeu5s" path="res://Assets/Sprites/key_s.tres" id="13_lllyf"]
[ext_resource type="PackedScene" uid="uid://craw0c07od0ad" path="res://Scenes/game_manager.tscn" id="14_08ny8"]
[ext_resource type="PackedScene" uid="uid://dlxixpxf0ago6" path="res://Assets/healthbar.tscn" id="15_i3eds"]
[ext_resource type="PackedScene" uid="uid://qinjj0efwlux" path="res://Assets/enemy_healthbar.tscn" id="16_g1vea"]
[ext_resource type="Script" uid="uid://cibhbvoay2dt5" path="res://Scripts/Multiplayer/multiGameManager.gd" id="16_vxqhj"]
[ext_resource type="Script" uid="uid://ppy4hp2ovquk" path="res://Scripts/Multiplayer/InputCollector.gd" id="18_vxqhj"]
[ext_resource type="Script" uid="uid://ce1d8ek7l206j" path="res://Scripts/Multiplayer/NetworkInputManager.gd" id="19_s3dso"]

[sub_resource type="GDScript" id="GDScript_xylqa"]
script/source = "extends Node

@onready var Lobby := get_node_or_null(\"/root/Lobby\")

var dbg_srv_steps: int = 0
var dbg_cli_inputs_recv: int = 0
var dbg_cli_corr_recv: int = 0
var dbg_last_inputs_tick: int = -1
var dbg_last_corr_tick: int = -1

# ---------- Signals ----------
signal positions_updated(pos: Dictionary)
signal input_updated(input: String)
 
# ---------- Ticks / windows ----------
const TICK := 1.0 / 60.0
const MAX_ROLLBACK: int = 30          # ~0.5s
const RESYNC_EVERY := 60 * 5      # full state every 5s
const SERVER_INPUT_DELAY := 2     # server waits N ticks behind latest received

var accumulator: float = 0.0
var tick_i: int = 0

# ---------- Sim: positions per player (deterministic ints) ----------
var players_input: Dictionary = {}  # peer_id -> String
const SPEED_PER_TICK: int = 6

# ---------- History ----------
var state_buffer: Dictionary = {}     # tick -> PackedByteArray
var input_buffer: Dictionary = {}     # tick -> Dictionary(peer_id->String)  (server-auth or received)
var my_inputs: Dictionary = {}        # tick -> String

# ---------- Net ----------
var last_confirmed_tick := -1
var server_last_received_tick := -1

func _ready() -> void:
	if multiplayer.get_peers().size() == 0:
		print(\"No peers, turning off multiplayer\")
		self.set_process(false)
		return
	print(\"GSM ready | server=\", multiplayer.is_server(), \" | id=\", multiplayer.get_unique_id())
	# simple: start everyone at 0 (or lay out by small index)
	var startpos = {}
	for pid in _all_player_ids():
		startpos[pid] = Vector2i(80, 80)
	emit_signal(\"positions_updated\", startpos.duplicate(true))

func _process(delta: float) -> void:
	accumulator += delta
	while accumulator >= TICK:
		_tick_once()
		if multiplayer.is_server():
			_server_maybe_advance()
		accumulator -= TICK

func _tick_once() -> void:
	var my_move := String(
		checkAllInputs()
	)
	my_inputs[tick_i] = my_move
	_send_input(tick_i, my_move)

	if not multiplayer.is_server():
		# Client prediction only
		var merged: Dictionary = _merged_inputs_for_tick_local(tick_i, my_move)
		_step_sim_with_inputs(merged)
		state_buffer[tick_i] = _serialize_state()

	tick_i += 1
	_prune_buffers()

# ---------------- RPC: client → server (inputs) ----------------
@rpc(\"any_peer\", \"unreliable\")
func rpc_client_input(t: int, move: String) -> void:
	if multiplayer.is_server():
		var pid := multiplayer.get_remote_sender_id()
		if input_buffer.get(t) == null: input_buffer[t] = {}
		input_buffer[t][pid] = move
		server_last_received_tick = max(server_last_received_tick, t)
		if t % 10 == 0: print(\"SRV got input t=\", t, \" pid=\", pid, \" move=\", move)

# ---------------- RPC: server → all (merged inputs per tick) ----------------
@rpc(\"call_local\", \"unreliable\")
func rpc_inputs_for_tick(t: int, merged: Dictionary) -> void:
	input_buffer[t] = merged
	if multiplayer.is_server(): return
	# replay only up to tick_i - 1 (exclude current in-flight tick)
	if t >= tick_i: return

	# base = last snapshot BEFORE the first tick we need to fix
	var base_tick: int = max(t - 1, 0)
	var base_snap: PackedByteArray = state_buffer.get(base_tick, null)
	if base_snap == null:
		# fallback: start from 0 if we don't have a pre-step snapshot
		base_tick = 0
		base_snap = state_buffer.get(0, null)
	if base_snap == null: return

	_deserialize_state(base_snap)

	for k in range(base_tick + 1, tick_i):  # <- stops at tick_i-1
		var my_move: String = my_inputs.get(k, \"null\")
		var merged_k: Dictionary
		if input_buffer.has(k):
			merged_k = input_buffer[k]  # authoritative merged (includes server + maybe me)
		else:
			merged_k = _merged_inputs_for_tick_local(k, my_move)  # predict
		_step_sim_with_inputs(merged_k)
		state_buffer[k] = _serialize_state()

# ---------------- RPC: server → all (state correction) ----------------
@rpc(\"call_local\", \"unreliable\")
func rpc_state_correction(t: int, bytes: PackedByteArray, h: int) -> void:
	if not multiplayer.is_server():
		dbg_cli_corr_recv += 1
		dbg_last_corr_tick = t
		print(\"CLI correction t=\", t, \" hash=\", h)
	# state_buffer holds PackedByteArray snapshots, not Dictionaries
	var mine_bytes: PackedByteArray = state_buffer.get(t, null)
	if mine_bytes != null and _state_hash(mine_bytes) == h:
		last_confirmed_tick = max(last_confirmed_tick, t)
		_prune_buffers()
		return

	# Desync: apply authoritative snapshot and replay
	_deserialize_state(bytes)

	for k in range(t + 1, tick_i):
		var my_move: String = my_inputs.get(k, \"null\")
		var merged: Dictionary = _merged_inputs_for_tick_local(k, my_move)
		_step_sim_with_inputs(merged)
		state_buffer[k] = _serialize_state()

	last_confirmed_tick = max(last_confirmed_tick, t)
	_prune_buffers()

# ---------------- Server advance (authoritative) ----------------
func _server_maybe_advance() -> void:
	# how far we can safely step (leave a small delay)
	var target: int = server_last_received_tick - SERVER_INPUT_DELAY
	if target < 0:
		return

	# last tick we advanced on the server
	var last_server_tick: int = -1
	for k in state_buffer.keys():
		last_server_tick = max(last_server_tick, k)

	var start: int = last_server_tick + 1
	for t in range(start, target + 1):
		var merged := _merged_inputs_for_tick_server(t)
		_step_sim_with_inputs(merged)
		var snap := _serialize_state()
		state_buffer[t] = snap

		# --- Debug ---
		dbg_srv_steps += 1
		if (t % 15) == 0:
			print(\"SRV step t=\", t, \" merged=\", merged, \" input=\", players_input)

		rpc(\"rpc_inputs_for_tick\", t, merged)
		if (t % RESYNC_EVERY) == 0:
			rpc(\"rpc_state_correction\", t, snap, _state_hash(snap))
	
# ---------------- Helpers: build merged inputs ----------------
func _merged_inputs_for_tick_server(t: int) -> Dictionary:
	var merged := {}
	for pid in _player_ids_for_tick(t):
		var mv: String = input_buffer.get(t, {}).get(pid, \"null\")
		merged[pid] = mv
	return merged

func _merged_inputs_for_tick_local(t: int, my_move: String) -> Dictionary:
	var merged: Dictionary = input_buffer.get(t, {}).duplicate(true) if input_buffer.has(t) else {}
	var my_id := multiplayer.get_unique_id()
	if not merged.has(my_id):
		merged[my_id] = my_move
	for pid in _player_ids_for_tick(t):
		if not merged.has(pid): merged[pid] = \"null\"
	return merged

func _all_player_ids() -> Array:
	if Lobby != null:
		var lp: Dictionary = Lobby.get(\"players\")  # returns null if property missing
		if typeof(lp) == TYPE_DICTIONARY:
			return (lp as Dictionary).keys()
	# fallback if Lobby isn’t present or players missing
	var ids: Array = [multiplayer.get_unique_id()]
	if multiplayer.is_server() and not ids.has(1):
		ids.append(1)
	return ids

func _player_ids_for_tick(t: int) -> Array:
	var ids: Array = []
	for pid in input_buffer.get(t, {}).keys():
		if not ids.has(pid): ids.append(pid)
	for pid in players_input.keys():
		if not ids.has(pid): ids.append(pid)
	if Lobby != null and typeof(Lobby.players) == TYPE_DICTIONARY:
		for pid in (Lobby.players as Dictionary).keys():
			if not ids.has(pid): ids.append(pid)
	var me := multiplayer.get_unique_id()
	if not ids.has(me): ids.append(me)      # <- ensure self
	if multiplayer.is_server() and not ids.has(1):
		ids.append(1)
	return ids

# ---------------- Transport ----------------
func _send_input(t: int, move: String) -> void:
	if multiplayer.is_server():
		var pid := multiplayer.get_unique_id()   # usually 1
		if input_buffer.get(t) == null:
			input_buffer[t] = {}
		input_buffer[t][pid] = move
		server_last_received_tick = max(server_last_received_tick, t)
	else:
		rpc_id(1, \"rpc_client_input\", t, move)

# ---------------- Deterministic sim ----------------
func _step_sim_with_inputs(merged: Dictionary) -> void:
	for pid in merged.keys():
		if players_input.get(pid) == null:
			players_input[pid] = \"null\"
		players_input[pid] = (merged[pid] as String)

	# make a copy with int keys to avoid \"2\" vs 2 mismatches
	var input_copy: Dictionary = {}
	for k in players_input.keys():
		input_copy[str(k)] = players_input[k]
	emit_signal(\"input_updated\", input_copy)

# ---- serialization ----
func _serialize_state() -> PackedByteArray:
	var ordered: Dictionary = {}
	var keys: Array = players_input.keys()
	keys.sort()
	for pid in keys:
		ordered[str(pid)] = players_input[pid]
	var bytes: PackedByteArray = var_to_bytes(ordered)
	return bytes

func _deserialize_state(bytes: PackedByteArray) -> void:
	var v: Variant = bytes_to_var(bytes)                  # <-- Godot 4 global
	var state_dict: Dictionary = v as Dictionary
	players_input.clear()
	for k in state_dict.keys():
		players_input[String(k)] = state_dict[k]

func _state_hash(bytes: PackedByteArray) -> int:
	var h: int = hash(bytes)                              # <-- global hash()
	return h

# ---------------- Housekeeping ----------------
func _prune_buffers() -> void:
	var cutoff := tick_i - MAX_ROLLBACK
	for k in input_buffer.keys():
		if k < cutoff: input_buffer.erase(k)
	for k in state_buffer.keys():
		if k < cutoff: state_buffer.erase(k)
	for k in my_inputs.keys():
		if k < cutoff: my_inputs.erase(k)

func checkAllInputs() -> String:
	if Input.is_action_just_pressed(\"player_left\"):
		return \"player_left\"
	if Input.is_action_just_pressed(\"player_right\"):
		return \"player_right\"
	if Input.is_action_just_pressed(\"player_jump\"):
		return \"player_jump\"
	if Input.is_action_just_pressed(\"player_punch\"):
		return \"player_punch\"
	if Input.is_action_just_pressed(\"player_kick\"):
		return \"player_kick\"
	if Input.is_action_just_pressed(\"player_throw\"):
		return \"player_throw\"
	if Input.is_action_just_pressed(\"player_crouch\"):
		return \"player_crouch\"
	return \"null\"
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1c2mv"]
size = Vector2(27, 256)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_tg752"]
size = Vector2(339, 20)

[sub_resource type="Animation" id="Animation_px76k"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(0, 0, 0, 1)]
}

[sub_resource type="Animation" id="Animation_c3vem"]
resource_name = "fade_to_black"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.85),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(0, 0, 0, 0), Color(0, 0, 0, 1)]
}

[sub_resource type="Animation" id="Animation_3dx3i"]
resource_name = "fade_to_normal"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.85),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(0, 0, 0, 1), Color(0, 0, 0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_m73bv"]
_data = {
&"RESET": SubResource("Animation_px76k"),
&"fade_to_black": SubResource("Animation_c3vem"),
&"fade_to_normal": SubResource("Animation_3dx3i")
}

[node name="Test Level" type="Node2D"]
script = SubResource("GDScript_xylqa")
metadata/_edit_horizontal_guides_ = [-21.0, 88.0]
metadata/_edit_vertical_guides_ = [-97.0, 97.0]

[node name="Runway" type="Sprite2D" parent="."]
position = Vector2(0, 33)
scale = Vector2(0.17, 0.17)
texture = ExtResource("1_d4vwv")

[node name="Invisible Wall" type="StaticBody2D" parent="Runway"]
visible = false
position = Vector2(-560, -188.235)
scale = Vector2(5.88235, 5.88235)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Runway/Invisible Wall"]
position = Vector2(0, -15)
shape = SubResource("RectangleShape2D_1c2mv")

[node name="Invisible Wall2" type="StaticBody2D" parent="Runway"]
visible = false
position = Vector2(560, -182.353)
scale = Vector2(5.88235, 5.88235)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Runway/Invisible Wall2"]
position = Vector2(0, -11)
shape = SubResource("RectangleShape2D_1c2mv")

[node name="Invisible Wall3" type="StaticBody2D" parent="Runway"]
visible = false
position = Vector2(0, 480.55)
scale = Vector2(5.88235, 5.88235)

[node name="CollisionShape2D" type="CollisionShape2D" parent="Runway/Invisible Wall3"]
position = Vector2(0, -22)
shape = SubResource("RectangleShape2D_tg752")

[node name="CameraRig" type="Node2D" parent="." node_paths=PackedStringArray("player1", "player2")]
position = Vector2(-50, 39)
scale = Vector2(0.75, 0.75)
script = ExtResource("2_nogt5")
player1 = NodePath("../Player")
player2 = NodePath("../Player1")

[node name="Camera2D" type="Camera2D" parent="CameraRig"]
offset = Vector2(0, -20.37)
zoom = Vector2(8.29, 8.29)
limit_left = -97
limit_top = 21
limit_right = 97
limit_bottom = 88

[node name="Player" parent="." instance=ExtResource("3_4g7hg")]
position = Vector2(-50, 39)
scale = Vector2(0.75, 0.75)
script = ExtResource("4_s3dso")

[node name="Player1" parent="." instance=ExtResource("3_4g7hg")]
position = Vector2(50, 40)
scale = Vector2(0.75, 0.75)
script = ExtResource("4_vxqhj")
player_type = 2
enemy_name = "player2"

[node name="Background Track" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("6_xylqa")
volume_db = -10.0

[node name="Sprite2D" type="Sprite2D" parent="."]
visible = false
modulate = Color(1, 1, 1, 0.866667)
position = Vector2(1.935, 37.1)
scale = Vector2(0.45, 0.379)
texture = ExtResource("7_nt58u")
script = ExtResource("8_o1kay")

[node name="RichTextLabel" type="RichTextLabel" parent="Sprite2D"]
offset_left = -131.0
offset_top = -85.0
offset_right = 145.0
offset_bottom = 63.0
theme_override_fonts/normal_font = ExtResource("9_psxfv")
text = "The opposing fashion show contestent is secretly an agent for the drug smuggling ring! 

To move:


"
scroll_active = false

[node name="Button" type="Button" parent="Sprite2D"]
modulate = Color(0.921362, 0.63823, 0.965459, 1)
offset_left = -47.035
offset_top = 57.087
offset_right = 41.965
offset_bottom = 88.087
text = "Start"

[node name="WKey2" type="Sprite2D" parent="Sprite2D"]
position = Vector2(-102.522, 48.6807)
scale = Vector2(0.666667, 0.791557)
texture = ExtResource("10_atul7")

[node name="AKey" type="Sprite2D" parent="Sprite2D"]
position = Vector2(-118.078, 72.4275)
scale = Vector2(0.666667, 0.791557)
texture = ExtResource("11_su618")

[node name="DKey" type="Sprite2D" parent="Sprite2D"]
position = Vector2(-71.4111, 72.4275)
scale = Vector2(0.666667, 0.791557)
texture = ExtResource("12_wlmax")

[node name="SKey" type="Sprite2D" parent="Sprite2D"]
position = Vector2(-93.6333, 72.4275)
scale = Vector2(0.666667, 0.791557)
texture = ExtResource("13_lllyf")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="Game Manager" parent="CanvasLayer" instance=ExtResource("14_08ny8")]
z_index = 3
position = Vector2(632, 53)
scale = Vector2(7.14, 7.14)
script = ExtResource("16_vxqhj")

[node name="Healthbar" parent="CanvasLayer" instance=ExtResource("15_i3eds")]
z_index = 3
anchors_preset = -1
anchor_left = -0.129036
anchor_top = -0.0196181
anchor_right = 0.0990885
anchor_bottom = 0.0095486
offset_left = 224.167
offset_top = 52.125
offset_right = 224.167
offset_bottom = 52.125
scale = Vector2(1.64516, 1.64516)
metadata/_edit_use_anchors_ = true

[node name="Healthbar2" parent="CanvasLayer" instance=ExtResource("16_g1vea")]
anchors_preset = -1
anchor_left = 0.183594
anchor_top = -0.0194444
anchor_right = 0.414844
anchor_bottom = 0.00972224
offset_left = 490.0
offset_top = 52.0
offset_right = 490.0
offset_bottom = 52.0
scale = Vector2(1.64516, 1.64516)
metadata/_edit_use_anchors_ = true

[node name="FadeTransition" type="CanvasLayer" parent="."]
visible = false

[node name="ColorRect" type="ColorRect" parent="FadeTransition"]
offset_left = -84.0
offset_top = -25.0
offset_right = 1416.0
offset_bottom = 775.0
color = Color(0, 0, 0, 1)

[node name="AnimationPlayer" type="AnimationPlayer" parent="FadeTransition"]
libraries = {
&"": SubResource("AnimationLibrary_m73bv")
}

[node name="GameStateManager" type="Node2D" parent="."]
script = ExtResource("1_4g7hg")

[node name="GhostVisualizer" type="Node2D" parent="GameStateManager"]
script = ExtResource("18_vxqhj")

[node name="Input" type="Node2D" parent="GameStateManager" node_paths=PackedStringArray("player1", "player2")]
script = ExtResource("19_s3dso")
player1 = NodePath("../../Player")
player2 = NodePath("../../Player1")

[connection signal="one_died" from="Player" to="CanvasLayer/Game Manager" method="_on_player_one_died"]
[connection signal="two_died" from="Player1" to="CanvasLayer/Game Manager" method="_on_player_two_died"]
[connection signal="button_down" from="Sprite2D/Button" to="Sprite2D" method="_on_button_button_down"]
[connection signal="animation_finished" from="FadeTransition/AnimationPlayer" to="CanvasLayer/Game Manager" method="_on_animation_player_animation_finished"]
